import sqlite3
import pandas as pd
from binance.client import Client
from database import init_db, save_candle
from indicators import calculate_indicators
from strategy import check_signal
from telegram_bot import send_telegram_message  # üî• Import du module Telegram
import hmac
from datetime import datetime, timedelta
import time
import hashlib
import requests
from urllib.parse import urlencode
import requests
from binance.client import Client
from decimal import Decimal, ROUND_FLOOR
import math
import sqlite3
import pandas as pd

DB_FILE = "C:\\...\\....db"

API_KEY = ""
API_SECRET = ""
client = Client(API_KEY, API_SECRET)
SYMBOL = "BTCFDUSD"
INTERVAL = Client.KLINE_INTERVAL_1SECOND
# URL Binance
BASE_URL = "https://api.binance.com"
#BASE_URL = "https://testnet.binance.vision"
current_position = None  # Peut √™tre "BUY", "SELL" ou None
last_buy_price = 0 #si vous avez d√©j√† un ordre limit de vente en cours
order_id = 0
action ="SELL"
# R√©cup√©rer le temps du serveur Binance
def get_binance_server_time():
    response = requests.get(BASE_URL + "/api/v3/time")
    server_time = response.json()["serverTime"]
    local_time = int(time.time() * 1000)
    print(f"Local time: {local_time}, Binance server time: {server_time}")
    print(f"Time difference: {server_time - local_time} ms")
    return server_time

# G√©n√©rer une signature HMAC-SHA256
def hashing(query_string):
    return hmac.new(API_SECRET.encode(), query_string.encode(), hashlib.sha256).hexdigest()

# Cr√©er une session avec les headers
session = requests.Session()
session.headers.update({"Content-Type": "application/json", "X-MBX-APIKEY": API_KEY})

# Fonction pour envoyer une requ√™te sign√©e
def send_signed_request(http_method, url_path, payload={}):
    payload["timestamp"] = get_binance_server_time()  # Synchronisation avec Binance
    payload["recvWindow"] = 5000  # Augmenter la fen√™tre de r√©ception
    query_string = urlencode(sorted(payload.items()))  # Trier les param√®tres
    signature = hashing(query_string)  # G√©n√©rer la signature
    url = f"{BASE_URL}{url_path}?{query_string}&signature={signature}"
    
    #print(f"{http_method} {url}")  # Debugging
    
    response = session.request(http_method, url)
    
    if response.status_code == 200:
        return response.json()
    else:
        #print("Error:", response.json())  # Debug
        return response.json()

# Fonction pour envoyer une requ√™te publique (sans signature)
def send_public_request(url_path, payload={}):
    query_string = urlencode(payload)
    url = f"{BASE_URL}{url_path}"
    if query_string:
        url += f"?{query_string}"
    
    #print("GET", url)  # Debugging
    response = session.get(url)
    return response.json()

# V√©rifier la synchronisation avec Binance
get_binance_server_time()

# R√©cup√©rer les informations du compte
response = send_signed_request("GET", "/api/v3/account")

print(response)

def get_btc_balance():
    account_info = send_signed_request("GET", "/api/v3/account")
    #print("R√©ponse de Binance:", account_info)  # üî• Debug
    
    if "balances" not in account_info:
        print("‚ö†Ô∏è Erreur: 'balances' n'existe pas dans la r√©ponse !")
        return 0.0  # Retourne 0 pour √©viter le crash

    for balance in account_info["balances"]:
        if balance["asset"] == "BTC":
            return float(balance["free"])
    return 0.0


btc_balance = get_btc_balance()
print(f"Solde BTC disponible : {btc_balance}")

def get_USDT_balance():
    account_info = send_signed_request("GET", "/api/v3/account")
    for balance in account_info["balances"]:
        if balance["asset"] == "FDUSD":
            return float(balance["free"])
    return 0.0

USDT_balance = get_USDT_balance()
print(f"Solde FDUSD disponible : {USDT_balance}")


def get_price(symbol):
    """R√©cup√®re le prix actuel du march√© pour un symbole donn√©."""
    response = requests.get(f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}")
    return float(response.json()["price"])
price = get_price("BTCFDUSD")

print(f"Le prix actuel du BTC en FDUSD est de {price}")


def BUYs():
    global last_buy_price
    USDT_balance = Decimal(get_USDT_balance() * 0.99925).quantize(Decimal('0.00001'), rounding=ROUND_FLOOR)
    # Passer un ordre d'achat (market)
    buy_params = {
        "symbol": "BTCFDUSD",
        "side": "BUY",
        "type": "MARKET",
        "quantity": USDT_balance,
    }
    buy_response = send_signed_request("POST", "/api/v3/order", buy_params)
    last_buy_price = get_price('BTCFDUSD')
    print("Buy order response:", buy_response)
    

def SELLs():
    global last_buy_price, order_id, action
    btc_balance = Decimal(get_USDT_balance()).quantize(Decimal('0.00001'), rounding=ROUND_FLOOR)
    # V√©rification de la balance avant de passer un ordre
    if btc_balance <= 0.000001:
        print("‚ùå Pas assez de BTC pour vendre.")
        return
    # Passer un ordre de vente (market)
    sell_params = {
        "symbol": "BTCFDUSD",
        "side": "SELL",
        "type": "LIMIT",
        "quantity": btc_balance,
        "price": round(last_buy_price * 1.00175, 2),  # Exemple: vente √† 1% en dessous du prix actuel
        "timeInForce": "GTC"  # Ordre valide jusqu'√† annulation
    }
    sell_response = send_signed_request("POST", "/api/v3/order", sell_params)
    if sell_response and "orderId" in sell_response:
        order_id = sell_response["orderId"]
        print(f"üìå Ordre LIMIT SELL {order_id} plac√© √† {sell_params['price']} FDUSD")
        action = "SELL"
    else:
        print("‚ùå √âchec de la cr√©ation de l'ordre SELL.")
    
def check_order_status(df):
    global action
    global order_id
    """
    R√©cup√®re la liste des ordres ouverts pour un symbole donn√©.
    """
    params = {
        "symbol": "BTCFDUSD"
    }
    response = send_signed_request("GET", "/api/v3/openOrders", params)

    if response and isinstance(response, list):
        if len(response) == 0:
            print(f"üî¥ Aucun ordre ouvert pour {"BTCFDUSD"}.")
            check_signal(df, execute_trade)
        else:
            print(f"üü¢ Ordres ouverts pour {"BTCFDUSD"}:")
            for order in response:
                print(f"Order ID: {order['orderId']}, Price: {order['price']}, Quantity: {order['origQty']}, Status: {order['status']}")
                if  order['status'] and order['status'] == "NEW":
                    print(f"üìä Statut de l'ordre {order_id}: {order['status']}")
                    print(f"‚úÖ Ordre ouvert √† {order['price']}, attente.... {get_price("BTCFDUSD")}")
                elif  order['status'] and order['status'] == "FILLED":
                    print(f"‚úÖ Ordre ex√©cut√© √† {order['price']}, d√©clenchement de la vente.")
    else:
        print("‚ö†Ô∏è Erreur lors de la r√©cup√©ration des ordres ouverts.")
# Afficher uniquement les balances non nulles
        
def Get_balance_utile():
    if "balances" in response:
        balances = response["balances"]
        for asset in balances:
            if float(asset["free"]) > 0 or float(asset["locked"]) > 0:
                print(f"{asset['asset']}: {asset['free']} (free), {asset['locked']} (locked)")
    else:
        print("Erreur : Impossible de r√©cup√©rer les balances.")


def get_historical_data():
    
    """V√©rifie si les donn√©es historiques existent d√©j√†, sinon les r√©cup√®re depuis Binance."""
    print("üîÑ V√©rification des donn√©es historiques...")

    # Connexion √† la base de donn√©es
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()

        # V√©rifier si la table 'market_data' existe et contient des donn√©es
        cursor.execute("SELECT COUNT(*) FROM market_data")
        count = cursor.fetchone()[0]
        
        if count == 0:
            print("üìö Donn√©es historiques trouv√©es dans la base de donn√©es. Chargement...")
            # Charger les donn√©es existantes
            df = pd.read_sql_query("SELECT * FROM market_data", conn)
            df['time'] = pd.to_datetime(df['time']).astype(str)
        else:
            print("‚ö†Ô∏è Aucune donn√©e historique trouv√©e. R√©cup√©ration des donn√©es depuis Binance...")
            # R√©cup√©rer les donn√©es historiques depuis Binance si elles n'existent pas
            # Calcul du timestamp de la derni√®re heure
            end_time = int(time.time() * 1000)  # Timestamp actuel en ms
            start_time = end_time - (60 * 60 * 1000)  # 1 heure en arri√®re
            klines = client.get_historical_klines(SYMBOL, INTERVAL, start_time)
            df = pd.DataFrame(klines, columns=['time', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                                            'quote_asset_volume', 'num_trades', 'taker_buy_base', 'taker_buy_quote', 'ignore'])
            
            df = df[['time', 'open', 'high', 'low', 'close']].astype(float)
            df['time'] = pd.to_datetime(df['time'], unit='ms').astype(str)

            # Calculer les indicateurs et sauvegarder dans la base de donn√©es
            df = calculate_indicators(df)

            # Sauvegarder les nouvelles bougies dans la table 'market_data'
            for _, row in df.iterrows():
                save_candle(tuple(row))  # Sauvegarde dans la base

            print("‚úÖ Historique r√©cup√©r√© et sauvegard√© dans la base de donn√©es.")
    
    return df



def execute_trade(action, data):
    # Appel de la fonction selon l'action
    if action == "BUY" and balance_usdt >= 8.000001:
        BUYs()
        """Ex√©cute une action d'achat ou de vente et envoie √† Telegram."""
        
        message = f"üî• *SIGNAL D√âTECT√â* : {action} üì¢\n" \
            f"üìÖ *Temps* : {data['time']}\n" \
              f"üí∞ *Prix* : {data['close']:.2f}\n" \
              f"üí∞ *Last Buy Price* : {last_buy_price:.2f}\n" \
              f"üìà *pente* : {data['slope']:.2f}\n" \
              f"üìä *TEMA20* : {data['TEMA20']:.2f}\n" \
              f"üìä *TEMA50* : {data['TEMA50']:.2f}\n" \
              f"üí≤ *FAUX Solde FDUSD* : {get_USDT_balance()}\n"  \
              f"ü™ô *FAUX Solde BTC* : {get_btc_balance()}"
    
        print(message)  # Affichage en console
        send_telegram_message(message)  # üî• Envoi sur Telegram
        SELLs()

def run_bot():
    """Boucle principale du bot, d√©tecte les signaux UNIQUEMENT en live."""
    init_db()
    # Charger l'historique sans signal

    get_historical_data()
    print("üü¢ Mode LIVE activ√© : D√©tection des signaux uniquement en temps r√©el !")

    send_telegram_message("üöÄ *Bot Trading * :  en temps r√©el sur Binance ‚Çø!")

    live_mode = False  # Activer la d√©tection des signaux seulement apr√®s le premier live tick

    while True:
        try:
            candles = client.get_klines(symbol=SYMBOL, interval=INTERVAL, limit=99)
            df = pd.DataFrame(candles, columns=['time', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                                                'quote_asset_volume', 'num_trades', 'taker_buy_base', 'taker_buy_quote', 'ignore'])

            df = df[['time', 'open', 'high', 'low', 'close']].astype(float)
            df['time'] = pd.to_datetime(df['time'], unit='ms').astype(str)

            df = calculate_indicators(df)
            print(df.head())        

            save_candle(tuple(df.iloc[-1]))


            # üî• Affichage du dernier DataFrame en live
            print("\nüü¢ Derni√®res donn√©es LIVE :")
            print(df.tail(5))

            # üî• Envoi du dernier DataFrame √† Telegram (optionnel)
            last_data = df.iloc[-1]
            print(df.columns)  # Ajoute cette ligne juste avant l'envoi de la mise √† jour √† Telegram
            if 'close' and 'slope' and 'TEMA20' and 'TEMA50' in last_data:
                telegram_message = f"üìä *Mise √† jour LIVE* üìÖ {last_data['time']}\n" \
                       f"üí∞ *Prix* : {last_data['close']:.2f}\n" \
                       f"üìà *slope* : {last_data['slope']:.2f}\n" \
                       f"üìä *TEMA20* : {last_data['TEMA20']:.2f}\n" \
                       f"üìä *TEMA50* : {last_data['TEMA50']:.2f}\n" \
                       f"üí≤ *Solde FDUSD* : {get_USDT_balance()}\n"  \
                       f"ü™ô *Solde BTC* : {get_btc_balance()}"
                print(telegram_message)  # Affichage en console
                #send_telegram_message(telegram_message)
            else:
                print("‚ö†Ô∏è Colonnes RSI manquantes ou incorrectes.")


            if live_mode:  # Ne d√©tecter les signaux qu'en live
                check_order_status(df)
                
            else:
                live_mode = True  # Activer la d√©tection de signaux pour la prochaine it√©ration

            time.sleep(1)  # Attendre 1 minute avant la prochaine it√©ration

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur : {e}")
            time.sleep(5)

if __name__ == "__main__":
    run_bot()
