# r√©cup√©rer temps de notre machine
import time
#  calcul scientifique, tableau, db etc
import numpy as np
# garde en m√©moire x √©l√©ments de liste
from collections import deque
# instance de La biblioth√®que binance pqui ermet d'interagir avec l'API de Binance (√©change de cryptomonnaies). 
from binance.client import Client
# La classe ThreadedWebsocketManager est sp√©cifiquement con√ßue pour g√©rer les connexions WebSocket √† Binance.
# Un WebSocket est une technologie qui permet d'√©tablir une connexion permanente entre le client et le serveur
# pour recevoir des mises √† jour en temps r√©el, sans avoir √† faire des appels API r√©p√©titifs.
# Cette classe g√®re plusieurs WebSockets de mani√®re efficace en utilisant des threads s√©par√©s,
# ce qui permet de recevoir des donn√©es en temps r√©el (comme les prix ou les ordres) de mani√®re fluide
# tout en gardant l'application r√©active.
from binance import ThreadedWebsocketManager
# Importation de toutes les √©num√©rations disponibles dans le module `binance.enums` de la biblioth√®que Binance.
# Le module `binance.enums` contient des constantes sous forme d'√©num√©rations (enums) qui sont utilis√©es
# pour sp√©cifier des valeurs fixes et pr√©d√©finies pour diff√©rents param√®tres lors des appels API.
# Ces √©num√©rations sont utilis√©es dans des m√©thodes comme `create_order()`, `get_order()`, etc.,
# pour rendre le code plus lisible et √©viter d'utiliser des valeurs litt√©rales comme des cha√Ænes de caract√®res ou des entiers.
# Par exemple, les √©num√©rations peuvent inclure :
# - `Side.BUY` ou `Side.SELL` pour indiquer si l'ordre est un achat ou une vente.
# -  `OrderType.MARKET` pour sp√©cifier le type d'ordre.
# - `TimeInForce.GTC` (Good Till Canceled), `TimeInForce.IOC` (Immediate or Cancel) pour sp√©cifier la dur√©e de validit√© d'un ordre.
# L'importation avec * permet d'importer toutes les √©num√©rations √† la fois, ce qui simplifie l'utilisation du code
# sans avoir √† les importer sp√©cifiquement une par une. Cela permet d'√©crire un code plus propre et plus lisible.
# Cependant, l'importation avec `*` peut entra√Æner des conflits de noms si plusieurs modules ou classes
# contiennent des membres portant le m√™me nom. Dans de tels cas, il est conseill√© d'importer uniquement
# les √©num√©rations n√©cessaires comme suit :
# `from binance.enums import OrderType, Side, TimeInForce`
from binance.enums import *
# (Technical Analysis Library)
# Cette biblioth√®que permet de calculer des indicateurs techniques comme TEMA20 et TEMA50 (RSI, MACD, etc.)
# Elle est utilis√©e pour l'analyse technique des donn√©es financi√®res, notamment dans les strat√©gies de trading automatis√©es.
import talib
# fonction colored, change la couleur du text pour les print()
from termcolor import colored
# cl√©s API Binance
API_KEY = ""
API_SECRET = ""
# Initialisation du client Binance, instance
client = Client(API_KEY, API_SECRET)
# Param√®tres globaux
symbol = 'BTCUSDT'
data_window = deque(maxlen=151)  # stockage des 151 derni√®res valeurs de closes
time_window = deque(maxlen=151)  # stockage des timestamps associ√©s
tema_window =deque(maxlen=151)   # stockage des TEMA20 associ√©s
# Param√®tres pour le calcul du TEMA et du slope
TEMA_period = 20  # nombre de points pour calculer TEMA20
slope_window = 3  # nombre de points pour calculer la pente
# Variable simualtion
usdt_balance = 1000.000000  # Balance initiale en USDT
btc_balance = 0.0000000  # Balance initiale en BTC
last_buy_price = 98000.00
# Seuils
bearish_slope_threshold = -0.084  # seuil pour d√©tecter une pente baissi√®re forte  (-0.01, -0.087)
bullish_slope_threshold = 0.16  # seuil pour d√©tecter une pente haussi√®re forte (0.23, 0.13)
# On consid√®re soit "en position" (buy) soit "hors position"
current_position = "none"
# Calcul de la TEMA avec TA-Lib. Renvoie la derni√®re valeur calcul√©e.
def compute_TEMA(data, period):
    if len(data) < period:
        return None
    np_data = np.array(data, dtype=float)
    tema = talib.TEMA(np_data, timeperiod=period)
    return tema[-1]
# Calcul de la pente sur les 'window' derniers points par r√©gression lin√©aire.
def compute_slope(data, window=slope_window):
    if len(data) < window:
        return None
    y = np.array(data[-window:], dtype=float)
    x = np.arange(window)
    slope, _ = np.polyfit(x, y, 1)
    return slope
# fonction pour d√©finir la couleur de slope selon sa valeur
def colorize_slope(slope):
    if slope < 0:
        return f'\033[91m{slope:.6f}\033[0m'  # Rouge pour une valeur n√©gative
    elif slope == 0:
        return f'\033[97m{slope:.6f}\033[0m'  # Blanc pour une valeur nulle
    else:
        return f'\033[92m{slope:.6f}\033[0m'  # Vert pour une valeur positive
# D√©finition de la fonction process_message qui traite les messages entrants (des donn√©es de march√©).
# 'msg' est l'argument, qui repr√©sente un message contenant des informations sur les prix.
def process_message(msg):
    # D√©claration des variables globales utilis√©es dans cette simulation
    global current_position, usdt_balance, btc_balance, last_buy_price
    #  'c' indique qu'il contient des informations sur le prix actuel.
    if 'c' in msg:
        # Conversion du prix en float
        price = float(msg['c'])
        # R√©cup√©ration du temps de l'√©v√©nement en millisecondes
        event_time = msg['E']
        # Mise √† jour des fen√™tres de donn√©es
        data_window.append(price)
        time_window.append(event_time)
        # Si la fen√™tre de donn√©es contient au moins 151 √©l√©ments (pour une analyse compl√®te, TEMA50 !)
        if len(data_window) >= 151:
            # Calcul du TEMA20 et TEMA50
            tema20 = compute_TEMA(list(data_window), period=TEMA_period)
            tema_window.append(tema20)
            tema50 = compute_TEMA(list(data_window), period=50)
            # Si la fen√™tre de TEMA contient au moins 61 √©l√©ments pour slope
            if len(tema_window) >= 61:
                # Calcul slope
                slope = compute_slope(list(tema_window), window=slope_window)
                # valeurs de TEMA20 pour d√©tecter extrema
                recent_data = list(tema_window)[-11:]
                recent_datas = list(data_window)[-11:]
                last_data = list(data_window)[-1]
                last_datas = list(data_window)[-2]
                last_tema = list(tema_window)[-2]
                recent_min = min(recent_data)
                mins = min(recent_datas)
                # Vente (si en position et conditions remplies)
                if current_position == "buy"  and btc_balance >= 0.0001 and price >= last_buy_price * 1.001: #and price >= last_buy_price * 1.001
                    usdt_balance += btc_balance   * price  # Conversion de BTC en USDT
                    btc_balance = 0.000000  # R√©initialisation apr√®s vente
                    print(f"[{time.ctime(event_time/1000)}] üî•VENTE √† üí∞{price:.6f} , ü™ô: {btc_balance:.6f}, üí≤ : {usdt_balance:.6f},prix d'achat {last_buy_price:.2f}")
                    current_position = "none"
                # Achat (si hors position et conditions remplies)‚ö†Ô∏è
                if current_position == "none" and tema20 >= recent_min * 1.00002 and tema20 >= last_tema * 1.00005 and last_data >= mins * 1.00025  and last_data >= last_datas* 1.0001 and usdt_balance >= 10.00 and price <= last_buy_price * 0.9995 :
                    if slope is not None and slope > bullish_slope_threshold and tema20 < (tema50 - 0.4):
                        btc_balance = (usdt_balance * 0.99925)  / price  # Achat du maximum possible
                        usdt_balance = 0.000000  # Tout l'USDT est converti en BTC
                        last_buy_price = price  # Enregistrer le prix d'achat
                        current_position = "buy"
                        print(f"[{time.ctime(event_time/1000)}] üî•ACHAT √† üí∞{price:.6f} (pente: {colorize_slope(slope)} ), ü™ô: {btc_balance:.6f}, üí≤ : 0.00")
                 #Affichage de l'√©tat de la parabole
                #if tema20 < tema50:
                    #print(f"[{time.ctime(event_time/1000)}] üíö U (pente: {colorize_slope(slope)}):) (TEMA20: {f'\033[94m{tema20:.2f}\033[0m'} < TEMA50: {f'\033[93m{tema50:.2f}\033[0m'}) üí∞: {price:.6f}")
                #else:
                    #print(f"[{time.ctime(event_time/1000)}] ‚ù§Ô∏è n  (pente: {colorize_slope(slope)}):( (TEMA20: {f'\033[94m{tema20:.2f}\033[0m'} >= TEMA50: {f'\033[93m{tema50:.2f}\033[0m'})üí∞: {price:.6f}")
# fonction principale 'main()' qui d√©marre le processus de gestion du websocket
def main():
    # Boucle infinie pour g√©rer la connexion WebSocket et les erreurs
    while True:
        try:
            # Cr√©ation d'une instance du 'ThreadedWebsocketManager' en utilisant la cl√© API et le secret API
            # Cela permet de se connecter √† Binance via WebSocket de mani√®re multithread√©e
            twm = ThreadedWebsocketManager(api_key=API_KEY, api_secret=API_SECRET)
            # D√©marrage du WebSocket Manager
            twm.start()
            # D√©marrage du socket pour r√©cup√©rer les donn√©es de ticker en temps r√©el pour un symbole donn√©
            # Le callback 'process_message' sera appel√© chaque fois qu'un message est re√ßu pour traiter les donn√©es
            twm.start_symbol_ticker_socket(callback=process_message, symbol=symbol)
            # Boucle interne pour maintenir le WebSocket ouvert
            while True:
                time.sleep(1)
        # Si une exception se produit (erreur de connexion, etc.), cela attrape l'erreur
        except Exception as e:
            print(f"Erreur d√©tect√©e : {e}. Red√©marrage du websocket dans 5s...")
            time.sleep(5)  # Pause avant red√©marrage
# Ex√©cution du script
if __name__ == '__main__':
    main()
